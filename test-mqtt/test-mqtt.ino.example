#include <SPI.h>
#include <MFRC522.h>
#include <ESP32Servo.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <PubSubClient.h>
#include <time.h>
#include <WebServer.h>

// Pin & Config
#define SS_PIN    5
#define RST_PIN   4
#define SERVO_PIN 2
#define LCD_ADDR  0x27
#define LCD_COLS  16
#define LCD_ROWS  2
#define MQTT_TOPIC "iot/door/log"
#define MAX_LOGS   50

// Wi‑Fi credentials
const char* WIFI_SSID = "YOUR_WIFI_SSID";
const char* WIFI_PASS = "YOUR_WIFI_PASSWORD";

// MQTT HiveMQ Cloud (TLS port)
const char* MQTT_HOST = "your-mqtt-host.s1.eu.hivemq.cloud";
const int MQTT_PORT = 8883;
const char* MQTT_USER = "YOUR_MQTT_USER";
const char* MQTT_PASS = "YOUR_MQTT_PASSWORD";
const char* CLIENT_ID = "ESP32Door-001";

// Sertifikat Root CA (contoh Let’s Encrypt)
static const char* root_ca = R"EOF(
-----BEGIN CERTIFICATE-----
your-root-ca-certificate-content-here
-----END CERTIFICATE-----
)EOF";

// Objects
MFRC522 rfid(SS_PIN, RST_PIN);
Servo myServo;
LiquidCrystal_I2C lcd(LCD_ADDR, LCD_COLS, LCD_ROWS);
WiFiClientSecure secureClient;
PubSubClient mqttClient(secureClient);
WebServer web(80);

// Data
String whitelist[] = { "4:E1:C9:5" };
String logs[MAX_LOGS];
int logCount = 0;

// Deklarasi fungsi
void connectWiFi();
void setupMQTT();
bool connectMQTT();
String getDateTime();
bool isAllowed(const String&);
void logAndPublish(const String&);
void setupWebServer();
void serveLogs();
void handleRFID();

void setup() {
  Serial.begin(115200);
  SPI.begin();
  rfid.PCD_Init();
  myServo.attach(SERVO_PIN, 500, 2400);
  lcd.init();
  lcd.backlight();
  lcd.print("Starting...");

  connectWiFi();
  setupMQTT();
  configTime(7*3600, 0, "pool.ntp.org");
  setupWebServer();
}

void loop() {
  if (!mqttClient.connected()) {
    if (!connectMQTT()) delay(5000);
  }
  mqttClient.loop();
  web.handleClient();
  handleRFID();
}

void connectWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  lcd.clear(); lcd.print("WiFi connecting...");
  unsigned long start = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - start < 15000) {
    delay(500); lcd.print(".");
  }
  if (WiFi.status() == WL_CONNECTED) {
    lcd.clear(); lcd.print("WiFi OK");
    Serial.println("WiFi connected, IP: " + WiFi.localIP().toString());
  } else {
    lcd.clear(); lcd.print("WiFi fail");
    Serial.println("WiFi failed, restarting...");
    ESP.restart();
  }
}

void setupMQTT() {
  secureClient.setCACert(root_ca);
  mqttClient.setServer(MQTT_HOST, MQTT_PORT);
}

bool connectMQTT() {
  lcd.clear(); lcd.print("MQTT connect...");
  Serial.print("MQTT connecting...");
  bool ok = mqttClient.connect(CLIENT_ID, MQTT_USER, MQTT_PASS);
  Serial.println(ok ? "OK" : "Failed, rc=" + String(mqttClient.state()));
  if (ok) lcd.clear(), lcd.print("MQTT OK");
  else lcd.clear(), lcd.print("MQTT fail");
  return ok;
}

String getDateTime() {
  time_t now = time(nullptr);
  struct tm* t = localtime(&now);
  char buf[20];
  strftime(buf, sizeof(buf), "%Y-%m-%d %H:%M:%S", t);
  return String(buf);
}

bool isAllowed(const String &uid) {
  for (auto &w : whitelist) if (w == uid) return true;
  return false;
}

void logAndPublish(const String &uid) {
  String dt = getDateTime();
  if (logCount < MAX_LOGS) logs[logCount++] = uid + "|" + dt;
  mqttClient.publish(MQTT_TOPIC, ("UID:" + uid + " time:" + dt).c_str());
}

void setupWebServer() {
  web.on("/", serveLogs);
  web.begin();
  lcd.clear();
  lcd.print("Web OK");
}

void serveLogs() {
  String html = "<html><h3>Door Logs</h3><table border=1><tr><th>UID</th><th>Time</th></tr>";
  for (int i = 0; i < logCount; i++) {
    int s = logs[i].indexOf('|');
    html += "<tr><td>" + logs[i].substring(0, s) + "</td><td>" + logs[i].substring(s+1) + "</td></tr>";
  }
  web.send(200, "text/html", html + "</table></html>");
}

void handleRFID() {
  if (!rfid.PICC_IsNewCardPresent() || !rfid.PICC_ReadCardSerial()) return;
  String uid;
  for (byte i = 0; i < rfid.uid.size; i++) {
    if (i) uid += ":";
    uid += String(rfid.uid.uidByte[i], HEX);
  }
  uid.toUpperCase();
  rfid.PICC_HaltA();
  rfid.PCD_StopCrypto1();

  lcd.clear();
  if (isAllowed(uid)) {
    logAndPublish(uid);
    myServo.write(180);
    delay(500);
    myServo.write(0);
    lcd.print("OK: " + uid);
  } else {
    lcd.print("Denied: " + uid);
  }
  delay(1500);
  lcd.clear(); lcd.print("Ready");
}
